1 - 
Les bouts de code en Python nécessite parfois un module complémentaire
pour fonctionner. 
Le petit programme en .bat lance des instructions 'pip' afin des les
installer automatiquement (ou met à jour si nécessaire). N'ayez pas peur
de cliquer dessus.

2-
Chaques parties est distinguées les unes des autres afin d'améliorer la 
visibilité et si jamais une erreur se produit lors d'une execution python
on ne doit pas recommencer depuis le début. 

3-
Ne pas hésiter à regarder la petite capture d'écran concernant le fichier 
à télécharger de sciensano. J'ai utilisé le JSON directement issus du site
afin d'éviter de faire une conversion manuelle de l'excel.

4-
Le fichier issus de sciensano est le point de départ à insérer dans le
premier dossier ('Conversion données de Sciensano'). Le script à l'intérieur
de ce dossier produit un fichier json qui est lui meme le point de départ
au deuxieme script placé dans le dossier ('Calcul de Matrices'). Il suffit
de copier coller ce fichier json dans ce dossier cible.

5-
Le fichier squeletteMatrice.json contient un squelette de la matrice. 
Celle-ci est constituée de 5 lignes et de 5 colonnes. 
Si un coéfficient est égal à "x", alors le programme considérera cela 
comme une variable. Tout autre caractère sera considérer comme une constante
dans le sens ou il tentera de convertir en nombre et si il n'y arrive pas
le coéfficient sera égal à "0".
Un coéfficient égal à 0 correspond à un lien mort de contamination, autrement
dit pas de contamination sur le lien en question.
Il n'est pas prévu de calcul de probabilité entre les communes...
(C'est déja pas logique de base...)
UPDATE du 29-04, en effet c'est ce qu'il fallait faire... Calculer cette
probabilité entre communes lol... du coup je modifierai le script (voir
plus tard).

6-
Le script2 dans le dossier ('2. Calcul de Matrices') calcule toutes les 
matrices de transformation pour chaque jours entre chaques communes.
Les valeurs comprises dans ces matrices correspondent aux coéfficient 
de contaminations entre communes :)
Update apres le cours du 29-04, en gros j'étais partis sur une supposition
de probabilité de 0.2 entre chaque commune, comme quoi chaque commune avaient
autant de chance de contaminer les autres et inversément. 
Mais il s'avère que ce n'est pas ce que veut le prof mais plutot arriver
à calculer ces probabilité entre ces communes.

7-
Le script ('creation des matrices squelette.py') s'occupe de créer toutes 
les matrices probabiliste de base possible ! 
Il faut choisir sa définition au début, de base je suis parti de l'ordre 
de la dixaine de pourcent ce qui correspond à des centaine de milliard de
possibilité xD ... (996 exp 5)...
Dans un premier temps j'ai essayé de le faire directement dans le code Python
d'une traite... Mais tout stocker dans la mémoire vive c'est pas une bonne
idée la.. (mon pc portable arrive à traiter environ 34 millions de matrices
avant de sérieusement ralentir (7G de ram et un amd R7)).
(J'utilisais la méthode .append d'un array pour fabriquer les matrices)
Du coup l'idée suivante c'est d'enregistrer ligne par ligne dans un fichier
l'ensemble des matrices... grace a la méthode d'ouverture append des fichiers.
D'après mes tests le processeur et la mémoire sont bien plus épargnés, et surtout
je sais diviser cet ensemble dans plusieurs fichiers séparés ! J'ai choisi de 
faire 12 fichiers distincts car ça tombait juste. Il suffit que je modifie le
range de la première boucle pour gérer ça, et ça permettra de diviser le temps
calcul par apres :)
Par contre ça prend beaucoup plus de temps xD !!



99-
Concernant le graphe dans la partie ('99. Graphe orienté'), je suis passé 
par le html/javascript afin de le générer... J'aurais pu passer par Python
libre à quelqu'un d'essayer si il veut...
Bien lire l'autre fichier 'lisez moi' afin de convertir le .json en 
script javascript (rien de sorcier lol)

 ____  ____  ____  ____  _  _   __   __ _  ____ 
/ ___)(_  _)(  __)(  _ \/ )( \ / _\ (  ( \(  __)
\___ \  )(   ) _)  ) __/) __ (/    \/    / ) _) 
(____/ (__) (____)(__)  \_)(_/\_/\_/\_)__)(____)

